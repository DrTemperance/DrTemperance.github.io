const image = [
	[
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)"
	], [
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)"
	], [
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)"
	], [
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(100, 50, 0)",
		"rgb(100, 50, 0)",
		"rgb(100, 50, 0)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(0, 0, 0)",
		"rgb(255, 200, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)"
	], [
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(100, 50, 0)",
		"rgb(255, 200, 150)",
		"rgb(100, 50, 0)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(0, 0, 0)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)"
	], [
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(100, 50, 0)",
		"rgb(255, 200, 150)",
		"rgb(100, 50, 0)",
		"rgb(100, 50, 0)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(0, 0, 0)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(150, 150, 150)"
	], [
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(100, 50, 0)",
		"rgb(100, 50, 0)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(0, 0, 0)",
		"rgb(0, 0, 0)",
		"rgb(0, 0, 0)",
		"rgb(0, 0, 0)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)"
	], [
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(255, 200, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)"
	], [
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(0, 50, 180)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)"
	], [
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(0, 50, 180)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(0, 50, 180)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)"
	], [
		"rgb(150, 150, 150)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(50, 200, 50)",
		"rgb(150, 150, 150)"
	], [
		"rgb(150, 150, 150)",
		"rgb(255, 255, 255)",
		"rgb(255, 255, 255)",
		"rgb(50, 200, 50)",
		"rgb(0, 50, 180)",
		"rgb(255, 255, 0)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(255, 255, 0)",
		"rgb(0, 50, 180)",
		"rgb(50, 200, 50)",
		"rgb(255, 255, 255)",
		"rgb(255, 255, 255)",
		"rgb(150, 150, 150)"
	], [
		"rgb(150, 150, 150)",
		"rgb(255, 255, 255)",
		"rgb(255, 255, 255)",
		"rgb(255, 255, 255)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(255, 255, 255)",
		"rgb(255, 255, 255)",
		"rgb(255, 255, 255)",
		"rgb(150, 150, 150)"
	], [
		"rgb(150, 150, 150)",
		"rgb(255, 255, 255)",
		"rgb(255, 255, 255)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(255, 255, 255)",
		"rgb(255, 255, 255)",
		"rgb(150, 150, 150)"
	], [
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(0, 50, 180)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)"
	], [
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(100, 50, 0)",
		"rgb(100, 50, 0)",
		"rgb(100, 50, 0)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(100, 50, 0)",
		"rgb(100, 50, 0)",
		"rgb(100, 50, 0)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)"
	], [
		"rgb(150, 150, 150)",
		"rgb(100, 50, 0)",
		"rgb(100, 50, 0)",
		"rgb(100, 50, 0)",
		"rgb(100, 50, 0)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(150, 150, 150)",
		"rgb(100, 50, 0)",
		"rgb(100, 50, 0)",
		"rgb(100, 50, 0)",
		"rgb(100, 50, 0)",
		"rgb(150, 150, 150)"
	]
];

const og = [];

for (let I = 0; I<image.length; I++) {
	let T = [];
	for (let J = 0; J<image[I].length; J++) T.push(image[I][J]);
	og.push(T);
}

function render(element, image) {
	for (let r = 0; r<image.length; r++) {
		for (let c = 0; c<image[r].length; c++) $("<div>").appendTo(element).addClass("square").css('left', c * 20).css('top', r * 20).css('background-color', image[r][c])
	}
}

function RGB_StringToArray(rgbStr) {
	let RGB_Ar = rgbStr.substring(4, rgbStr.length - 1).replace(/ /g, '').split(',');

	RGB_Ar[0] = Number(RGB_Ar[0]);
	RGB_Ar[1] = Number(RGB_Ar[1]);
	RGB_Ar[2] = Number(RGB_Ar[2]);

	return RGB_Ar;
}

function reset() {for (let i = 0; i<image.length; i++) for (let j = 0; j<image[i].length; j++) image[i][j] = og[i][j];}